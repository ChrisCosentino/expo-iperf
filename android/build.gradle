//apply plugin: 'com.android.library'
//
//group = 'expo.modules.iperf'
//version = '0.1.0'
//
//def expoModulesCorePlugin = new File(project(":expo-modules-core").projectDir.absolutePath, "ExpoModulesCorePlugin.gradle")
//apply from: expoModulesCorePlugin
//applyKotlinExpoModulesCorePlugin()
//useCoreDependencies()
//useExpoPublishing()
//
//// If you want to use the managed Android SDK versions from expo-modules-core, set this to true.
//// The Android SDK versions will be bumped from time to time in SDK releases and may introduce breaking changes in your module code.
//// Most of the time, you may like to manage the Android SDK versions yourself.
//def useManagedAndroidSdkVersions = false
//if (useManagedAndroidSdkVersions) {
//  useDefaultAndroidSdkVersions()
//} else {
//  buildscript {
//    // Simple helper that allows the root project to override versions declared by this library.
//    ext.safeExtGet = { prop, fallback ->
//      rootProject.ext.has(prop) ? rootProject.ext.get(prop) : fallback
//    }
//  }
//  project.android {
//    compileSdkVersion safeExtGet("compileSdkVersion", 36)
//    defaultConfig {
//      minSdkVersion safeExtGet("minSdkVersion", 24)
//      targetSdkVersion safeExtGet("targetSdkVersion", 36)
//    }
//  }
//}
//
//android {
//  namespace "expo.modules.iperf"
//  defaultConfig {
//    versionCode 1
//    versionName "0.1.0"
//  }
//  lintOptions {
//    abortOnError false
//  }
//}
apply plugin: 'com.android.library'

group = 'expo.modules.iperf'
version = '0.1.0'

def expoModulesCorePlugin = new File(project(":expo-modules-core").projectDir.absolutePath, "ExpoModulesCorePlugin.gradle")
apply from: expoModulesCorePlugin
applyKotlinExpoModulesCorePlugin()
useCoreDependencies()
useExpoPublishing()

// If you want to use the managed Android SDK versions from expo-modules-core, set this to true.
// The Android SDK versions will be bumped from time to time in SDK releases and may introduce breaking changes in your module code.
// Most of the time, you may like to manage the Android SDK versions yourself.
def useManagedAndroidSdkVersions = false
if (useManagedAndroidSdkVersions) {
  useDefaultAndroidSdkVersions()
} else {
  buildscript {
    // Simple helper that allows the root project to override versions declared by this library.
    ext.safeExtGet = { prop, fallback ->
      rootProject.ext.has(prop) ? rootProject.ext.get(prop) : fallback
    }
  }
  project.android {
    compileSdkVersion safeExtGet("compileSdkVersion", 36)
    defaultConfig {
      minSdkVersion safeExtGet("minSdkVersion", 24)
      targetSdkVersion safeExtGet("targetSdkVersion", 36)
    }
  }
}

android {
  namespace "expo.modules.iperf"
  defaultConfig {
    versionCode 1
    versionName "0.1.0"

    // Add NDK configuration
    externalNativeBuild {
      cmake {
        cppFlags "-std=c++11"
        arguments "-DANDROID_STL=c++_shared"
        cFlags "-D__ANDROID_UNAVAILABLE_SYMBOLS_ARE_WEAK__"
      }
    }

    ndk {
      // Specify ABIs to build for
      abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
    }
  }

  // Add CMake path
  externalNativeBuild {
    cmake {
      path "src/main/cpp/CMakeLists.txt"
//      version "3.18.1"
    }
  }

  lintOptions {
    abortOnError false
  }

  packagingOptions {
    jniLibs {
      useLegacyPackaging = true
    }
  }
}